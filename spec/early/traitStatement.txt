#
# Dependencies: basic, annotation, containerfield, type 
#

New Syntax {
	
	whereClauses ::= "where" whereClause {"," whereClause}
	whereClause ::= (Name|"Self") ":" traitExp
	
	globstat @::= | OptExportPrefix "trait" Name ["(" paramList ")"] [":" traitExp] [whereClauses] "{" {globstat} "}"
}

New Keywords {
	trait
	Self
	self
}

Trait Statement {
	
	-- trait Name {...}
	Defines a new trait.
	
	Inside traits, any code can use "Self" to refer to the type the trait is for, however there isnt much you can do inside default code, as you only know that the trait is implemented, but not anything else.
	
	Traits allow you to define functions for other types (and trait combinations), in a less repetetive way.
	
	Aliases for trait combinations can be made using the const statement:
	```slu
	const trait BasicMathOps = Add + Sub + Mul + Div
	```
	
	The `":" traitExp` part is equivelant to `where Self : traitExp`
}

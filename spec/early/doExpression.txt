#
# Dependencies: basic, type, comptime, safety
#

New Syntax {
	
	basicExp @::= | ["const"] "do" ["->" basicExp] statOrRet
}

New Keywords {
	do
	const
}

Do Expression {
	
	Lets you compute a value inside in a expression, while being able to use statments, and more complex code.
	
	Using const, forces it to run at compile-time.
	
	Using "break" inside do blocks completes them, and returns the result, to be used for the expression outside.
	Returning multiple expressions at once automatically produces a tuple, just like let, const, etc...
	
	
	Do expressions must end with a return or break, since all paths must return a value or exit the function.
	
	The return type is inferred, when missing.
	
	Do expressions are not like lambdas, since they arent functions, but a different way to write expressions.
	
	Also useful for macros.
	
	Inside coroutines, do blocks can directly yield.
	
	Implementation {
		May be implemented by lambdas that capture values.
		
		Can also be implemented as code outside of an expression.
	}
}
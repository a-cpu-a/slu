#
# Dependencies: basic, type, comptime
#

New Syntax {
	--Also, type expr is prefered over func call / var, so if they return types, then they are treated as types.
	--Note: binop doesnt allow 'and'. And 'or' is used in a different way
	--Note: || lambdas are not parsed. Aka `|...| ...`
	--Note: table constructors are not parsed.
	sPat ::= basicExp
	
	
	destrSpec ::= sPat | typePrefix
	
	extraFieldSignifier ::= "," ".."
	
	
	destrField ::= "|" tupleableName "|" pat
	destrFieldList ::= destrField {"," destrField} [extraFieldSignifier]
	destrPatFieldList ::= pat {"," pat} [extraFieldSignifier]
	
	dPat ::= destrSpec "{" destrFieldList "}" [Name]
		| destrSpec "{" destrPatFieldList "}" [Name]
		
		| destrSpec Name ["=" ndPat] 
		| "_"
	
	
	destrFieldUncond ::= "|" tupleableName "|" uncondDestrPat
	uncondDestrFieldList ::= destrFieldUncond {"," destrFieldUncond} [extraFieldSignifier]
	uncondDestrPatFieldList ::= uncondDestrPat {"," uncondDestrPat} [extraFieldSignifier]
	
	uncondDestrPat ::= destrSpec "{" uncondDestrFieldList "}" [Name]
		| destrSpec "{" uncondDestrPatFieldList "}" [Name]
		
		| destrSpec Name
		| "_"
	
	
	ndPat ::= sPat
	pat ::= sPat | dPat
	
	matchItem ::= pat ["if" exp] "=>" explist
	matchStat ::= matchItem | ";"
	
	statOrExpr @::= | "match" basicExp ["->" basicExp] "{" {matchStat} "}"
}

New Keywords {
	match
	case
}

Match Statement {
	
	
	--TODO: do we even need restrictions?
	-- the only loss would be '5 or 7 or 11' type of stuff, unless you type it out using a 'if'
	
	Lets you match on a expressions result.
	
	The return type is assigned automatically, if missing.
	
	First matching pattern will be used. (top to bottom)
	The order inside the patterns is undefined.
	
	Match statments must always handle all inputs.
	If some inputs wouldnt match, then a soft-error occurs, and a " else => panic!(); " is inserted.
	It is an soft-error to have multiple cases that are identical, without any if checks.
	
	
	"extraFieldSignifier" is required, when a field / array element is ignored, or when matching on dynamicaly-sized arrays.
	
	Implementation {
		May be a jump table, if else chain, etc.
	}
}
#
# Dependencies: basic, types
#

Copy Trait {
	Marks a type as being memcpy-able.
	
	may be cheap or expensive, but not implicit.
}
Clone Trait {
	if T is Copy or Claim (or even both), then Clone is auto implemented. (auto impl uses memcpy)
	
	may be cheap or expensive, but not implicit.
}
Claim Trait {
	Marks a types clone impl as implicit, so it is called instead of moving (except at the last use, where a clone would be useless).
	The clone impl must not use panic or abort, it must be O(1), be either a memcpy or implement Handle.
	Should only be implemented if copying <= 128 bits of data, and the size must be known at compile time.
	
	--TODO: could the name potentially be improved? "AutoCopy", "AutoClone", "ImplicitCopy", ...?
}
Handle Trait {
	Contains an alias for .clone(), called "handle".
	This should be implemented on types that have a clone that returns the same underlying value[3], instead of making a full copy.
	(basically use on types like Rc, Arc, ...)
}

Copying {
	Copy,Clone or Claim can be used to create a copy.
	if a type implements Claim, then it goes from move-only, to auto-copy.
}



Sources {
	https://smallcultfollowing.com/babysteps/blog/2024/06/21/claim-auto-and-otherwise/
	https://smallcultfollowing.com/babysteps/blog/2024/06/26/claim-followup-1/
	3: https://smallcultfollowing.com/babysteps/blog/2025/10/07/the-handle-trait/#we-would-lint-and-advice-people-to-call-handle
}

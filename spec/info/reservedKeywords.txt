#
# Dependencies: basic
#

New Keywords {
	
	--language:lua content:/(?-i)X/
	--language:lua symbol:/(?-i)X/
	
	--kw		content		symbol		meaning
	
	
	--Only partially reserved, so is allowed if inside mp's `a::drop`, or function names `fn drop()`, but you cant call it like `drop()`, only like `self::drop()`
	--TODO: impl those allowed exceptions, as it is fully reserved rn
	drop   		(377k)		(40.3k)		Drop a value explicitly
	--Partially reserved, but only allowed in var path, like: `x = trait` `std::trait::hello`, still reserved in var/struct/module names
	trait  		(63.2k)		(4k)		Define a trait
	
	--Maybe eventualy used...
	
	any 		(..)		(..)		c++ concepts but defining the type (Ty = any MyConcept)
	has    		(..)		(..)		maybe for trait impl check?
	raw    		(766k)		(176k)		?
	glob   		(..)		(..)		alternative form for global vars, instead of 'static'. A global var that is might not be stored in const-memory / is memrefed?
	reloc  		(6.1k)		(470)		Relocate a value
	nosize		(..)		(..)		maybe something you could add in a slice, to disable size data `[nosize]u8`, also making the type unimplemented Sized.
	concept 	(..)		(..)		maybe c++ style template concepts
	nostride	(..)		(..)		like nosize, but to disable stride data `[nostride]u8`
	unstrided	(..)		(..)		like nostride
	

	--Future proofing

	at			(..)		(..)		maybe for ranges, fixed-point precision?
	of			(2.5m)		(87k)		?
	asm    		(..)		(..)		asm blocks
	box    		(451k)		(42.2k)		?
	out			(..)		(..)		?
	auto		(..)		(..)		auto traits: https://github.com/rust-lang/rfcs/pull/3851?
	case		(352k)		(8.2k)		match case?
	only		(745k)		(5.2k)		Different ref system
	test		(..)		(..)		compile time tests, kinda like zig
	with		(..)		(..)		Impl with args?
	final  		(122k)		(7.7k)		?
	inout		(..)		(..)		?
	become 		(52k)		(286)		?
	inline 		(..)		(..)		inlined loops, like zig.
	typeof 		(44k)		(616)		?
	default		(..)		(..)		Default impls? https://rust-lang.github.io/rfcs/1210-impl-specialization.html#the-default-keyword
	discard		(..)		(..)		discard terminator like in frag shaders.
	uniform		(..)		(..)		shader uniforms.
	unsized		(120)		(0)			?
	virtual		(82.9k)		(3.2k)		?
	abstract	(14k)		(358)		?
	comptime	(256)		(4)			comptime marker / expr
	override	(253k)		(14.8k)		?
	groupshare	(..)		(..)		something that is shared between multiple shader threads... or was it blocks?
	groupshared	(..)		(..)		alt form of groupshare
	threadlocal (..)		(..)		thread local globals?


	--planned
	
	gen    		(909k)		(89.6k)		Generator?
	copy   		(461k)		(41.7k)		Copy a value explicitly
	move   		(1.7m)		(341k)		Move a value explicitly
	async  		(82.9k)		(5.7k)		Mark as async?
	await  		(16.9k)		(1.2k)		Wait for something from a value.
	super  		(207k)		(6.3k)		Super-type, super module
	yield  		(53.8k)		(2.3k)		Async / gen weak return
	static 		(250k)		(6.5k)		Global
	generator	(64.8k)		(5.6k)		Generator function?
	
	
	--keywords from other spec things
	
	as			(4.6m)		(713k)		cast / use...as...
	ex			(3.7m)		(573k)		export
	fn			(563k)		(48.1k)		function def
	it			(..)		(..)		also exp/block
	dyn    		(209k)		(5.5k)		Vtable trait
	let			(1.6m)		(199k)		var defs
	mod			(..)		(..)		module
	mut			(85k)		(8.2k)		mutable
	try			(672k)		(73k)		try expr/stat
	use			(2.4m)		(140k)		use expr
	also		(..)		(..)		also expressions / blocks
	enum   		(129k)		(8.5k)		Define a enum
	impl   		(594k)		(23.8k)		Implement a trait
	loop   		(288k)		(12.8k)		Loop forever
	safe   		(141k)		(17.2k)		Mark as safe
	self		(1.5m)		(35.3k)		self arg / this module
	Self		(174k)		(11.4k)		This type
	alloc		(??)		(??)		Allocate something for gc
	axiom		(..)		(..)		Axiom stuff
	catch		(44k)		(3.3k)		catch stat
	const		(317k)		(34.3k)		Immutable pointers
	crate		(73k)		(1.1k)		this crate
	defer		(??)		(??)		Defer impl type checking.
	macro		(52.5k)		(5.8k)		macro def
	match		(545k)		(27.4k)		match expr
	share		(424k)		(7.6k)		Extended ref system
	throw		(92.2k)		(7k)		return a error
	trans  		(..)		(..)		Transmute types / type states
	union  		(25k)		(2k)		Define a union
	where  		(299k)		(1.8k)		Where clauses
	extern		(..)		(..)		extern blocks, extern spec
	module		(651k)		(40.2k)		module def
	struct 		(506k)		(62.2k)		Define a struct
	unsafe 		(6.4k)		(372)		Mark as unsafe
	continue 	(162k)		(4.1k)		Try looping again.
	recursive	(..)		(..)		Recursive types.
	
	--Common with lua
	
	do
	if
	in
	or
	and
	end
	for
	else
	goto
	then
	break
	local
	until
	while
	elseif
	global		(578k)		(16.1k)		Easier to undestand than static?
	repeat
	return
	function
	
}
Data {
	
	--Not reserved currently
	
	a			(6.1m)		(3.6m)		advanced types
	to			(4m)		(1.1m)		range operator / match range
	is			(4.8m)		(1m)		postfix types?
	new 		(1.8m)		(303k)		?
	ref    		(1.1m)		(82.4k)		?
	type		(1.9m)		(78.3k)		type alias
	newtype		(..)		(..)		newtype tag
}
for i in 1..100 {
	--[=[CODE HERE]=]
}
-->

do {
	let mut __iter = :>::std::IntoIterator::intoIter(1..100);
	break loop {
		match :>::std::Iterator::next(&mut __iter) {
			:>::std::Option::None => break
			:>::std::Option::Some{i} => do {--[=[CODE HERE]=]}
		}
	}
}
-----------------------------
fn helloOpt() -> :>::std::Option(u8);

let v1 = helloOpt()?

-->

let v1 = match helloOpt() {
	:>::std::Option::None => return :>::std::Option::None
	:>::std::Option::Some{__value} => __value
};
--2026?
let v2 = match :>::std::ops::Try::branch(helloOpt()) {
	:>::std::ops::ControlFlow::Continue{__value} => __value
	:>::std::ops::ControlFlow::Return{__value} => return __value
	:>::std::ops::ControlFlow::Throw{__err} => throw __err
};
-----------------------------
fn hello() -> u8~~String;

let v2 = hello()?

-->

let v2 = try hello() {};

-->

let v2 = match hello() {
	:>::std::Result::Ok{__value} => __value
	:>::std::Result::Err{__err} => throw __err
};
-----------------------------
let v3 = try hello() {String=>100};

-->

let v3 = match hello() {
	:>::std::Result::Ok{__value} => __value
	:>::std::Result::Err{String} => 100
	--Err{__err} => do{throw __err}; --err is always a String
};
-----------------------------
let v4 = 1+1*1;

-->

let v4 = :>::std::ops::Add::add(1,:>::std::ops::Mul::mul(1,1));
-----------------------------
let vO = a() or b();

-->

let vO = if a() => :>::std::bool::true else => b();
--2026?
let vO = match :>::std::ops::Or::orShortCircuit(a()) {
	:>::std::ops::ShortCircuit::Break{__value} => __value
	:>::std::ops::ShortCircuit::Merge{__value} => :>::std::ops::Or::boolOr(__value,b())
};
--or maybe...
let vO = do {
	let __value = a(); 
	break if :>::std::ops::Or::stopOr(&__value)
		=> __value
		else => :>::std::ops::Or::boolOr(__value,b())
}
-----------------------------
let vA = a() and b();

-->

let vA = if a() => b() else => :>::std::bool::false;
--2026?
let vA = match :>::std::ops::And::andShortCircuit(a()) {
	:>::std::ops::ShortCircuit::Break{__value} => __value
	:>::std::ops::ShortCircuit::Merge{__value} => :>::std::ops::And::boolAnd(__value,b())
};
--or maybe...
let vA = do {
	let __value = a(); 
	break if :>::std::ops::And::stopAnd(&__value)
		=> __value
		else => :>::std::ops::And::boolAnd(__value,b())
}
-----------------------------
let v5 = x.*;

-->

let v5 = :>::std::ops::RootDeref::rootDeref(--Turns it into a deref-type
	:>::std::ops::Deref::deref(x)--only if x is just 1 level deep
);
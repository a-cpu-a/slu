#
# Dependencies:
#

New Syntax {
	
	--TODO: ban non global statements in chunks at parse time.
	chunk ::= {globstat}

	block ::= {stat} [retstat [‘;’]]
	
	globstat ::= ‘;’
	
	basicstat ::= ‘;’
		| varlist ‘=’ explist
		| var selfablecall
		| ‘goto’ Name
	
	statOrExpr ::= ‘loop’ ["->" basicExp] ‘{’ block ‘}’
	
	--TODO: loop exprs & stats, also move it to some new spec
	stat ::=  basicstat
		| globstat
		| statOrExpr
		| label
		| ‘{’ block ‘}’
		| ‘while’ basicExp statOrRet
		| ‘repeat’ statOrRet ‘until’ exp
		| ‘for’ uncondDestrPat ‘=’ exp ‘,’ basicExp [‘,’ basicExp] statOrRet
		| ‘for’ uncondDestrPat ‘in’ basicExp statOrRet
		| ‘local’ uncondDestrPat [‘=’ explist]

	--TODO: parse labeled breaks, parse continue too
	retstat ::= (("return" | "break" [":" Name]) [explist]) | "continue"

	statOrRet ::= retstat [‘;’] | basicstat [‘;’] | ‘{’ block ‘}’
	
	

	label ::= ‘:::’ Name ‘:’

	explist ::= exp {‘,’ exp}
	varlist ::= var {‘,’ var}
	
	subvar ::= ‘.*’ | ‘.’ Name | ‘[’ exp ‘]’ | 
	var ::= Name | ‘(’ exp ‘)’ | var {selfablecall} subvar

	basicArgs ::=  ‘(’ [explist] ‘)’ | LiteralString
	args ::=  basicArgs | tableconstructor
	
	selfablecall ::= ["." Name] args

	basicExp ::=  Name | ‘(’ exp ‘)’ | Numeral | LiteralString | tableconstructor
		| basicExp subvar | basicExp selfablecall
		| basicExp binop basicExp | {unop} basicExp {postunop}
		| statOrExpr
	
	exp ::=  basicExp
		| exp subvar | exp selfablecall
		| exp binop exp | {unop} exp {postunop}

	tableconstructor ::= ‘{’ [fieldlist] ‘}’
	fieldlist ::= field {fieldsep field} [fieldsep]
	field ::= Name ‘=’ exp | exp
	fieldsep ::= ‘,’ | ‘;’

	binop ::=  ‘+’ | ‘-’ | ‘*’ | ‘/’ | ‘//’ | ‘^’ | ‘%’
		| ‘&’ | ‘~’ | ‘|’ | ‘>>’ | ‘<<’ | ‘++’
		| ‘<’ | ‘<=’ | ‘>’ | ‘>=’ | ‘==’ | ‘!=’
		| ‘and’ | ‘or’

	unop ::= ‘-’ | ‘!’
	
	postunop ::=
}

New Keywords {
	and
	break
	do
	else
	for
	function
	goto
	if
	in
	local
	or
	repeat
	return
	until
	while
}
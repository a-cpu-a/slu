#
# Dependencies:
#

New Syntax {
	
	chunk ::= block

	block ::= {stat} [retstat [‘;’]]

	basicstat ::= ‘;’
		| varlist ‘=’ explist
		| functioncall
		| ‘goto’ Name

	--TODO: loop exprs, also move it to some new spec
	stat ::=  basicstat
		| ‘loop’ ‘{’ block ‘}’
		| label
		| ‘{’ block ‘}’
		| ‘while’ basicExp statOrRet
		| ‘repeat’ statOrRet ‘until’ exp
		| ‘for’ uncondDestrPat ‘=’ exp ‘,’ basicExp [‘,’ basicExp] statOrRet
		| ‘for’ uncondDestrPat ‘in’ basicExp statOrRet
		| ‘local’ uncondDestrPat [‘=’ explist]

	--TODO: labeled breaks
	--TODO: parse break as a retstat
	retstat ::= ("return" | "break" [":" (Name | "do" | "for" | "while" | "repeat" | "loop")]) [explist]

	--TODO: be more lenient on the semicolons too
	statOrRet ::= retstat | basicstat | ‘{’ block ‘}’
	
	

	label ::= ‘:::’ Name ‘:’

	varlist ::= var {‘,’ var}

	varbase ::= Name | ‘(’ exp ‘)’ subvar
	subvar ::= {args} (‘[’ exp ‘]’ | ‘.’ Name | ‘.*’)
	var ::= varbase {subvar}

	namelist ::= Name {‘,’ Name}

	explist ::= exp {‘,’ exp}

	basicExp ::=  Numeral | LiteralString | tableconstructor
		| prefixexpBfuncArgs | functioncallBasicArgs
		| basicExp binop basicExp | {unop} basicExp {postunop}
	
	exp ::=  basicExp
		| prefixexp | functioncall
		| exp binop exp | {unop} exp {postunop}

	prefixexp ::= var | ‘(’ exp ‘)’
	functioncall ::=  prefixexp args
	
	--Note: this var doesnt allow {} and "" style args.
	prefixexpBfuncArgs ::= var | functioncallBasicArgs | ‘(’ exp ‘)’
	functioncallBasicArgs ::=  prefixexpBfuncArgs basicargs

	basicargs ::=  ‘(’ [explist] ‘)’
	args ::=  basicargs | tableconstructor | LiteralString 

	tableconstructor ::= ‘{’ [fieldlist] ‘}’

	fieldlist ::= field {fieldsep field} [fieldsep]

	field ::= Name ‘=’ exp | exp

	fieldsep ::= ‘,’ | ‘;’

	binop ::=  ‘+’ | ‘-’ | ‘*’ | ‘/’ | ‘//’ | ‘^’ | ‘%’
		| ‘&’ | ‘~’ | ‘|’ | ‘>>’ | ‘<<’ | ‘++’
		| ‘<’ | ‘<=’ | ‘>’ | ‘>=’ | ‘==’ | ‘!=’
		| ‘and’ | ‘or’

	unop ::= ‘-’ | ‘!’
	
	postunop ::=
}

New Keywords {
	and
	break
	do
	else
	for
	function
	goto
	if
	in
	local
	or
	repeat
	return
	until
	while
}
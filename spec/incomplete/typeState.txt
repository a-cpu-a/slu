#
# Dependencies: basic
#

New Syntax {
	
}

New Keywords {
	trans
}

Type State {
	
	is this a great idea or maybe not such a good idea?
	
	Safely mutate types of variables, without redefining them every time.
	
	TODO: how would you easily make a enum version of the typestates? : Note, now that enum items are their own kind of type, this may not be so hard, if its restricted to a preset state defined by some enum.
		currently the system works great, until you need some runtime behaviour.
		(manualy moving into/out of some enum variants)
		(2 seperate places that both define what enum states are allowed (enum of state data, enum of state types))
	
	TODO: maybe a marker at call sites, to help type inference? `in.trans skipSpace()`
		or maybe a marker on the variable? `trans let x = stream(); x.y();`
	
	instead of:
	```slu
	let mut x = Stream{" Input text"}
	let mut x1 = x.skipspace()
	let {mut x2,name} = x1.readName()
	```
	you can do:
	```slu
	let mut x = Stream{" Input text"}
	x.skipspace()
	let name = x.readName()
	```
	
	Example use:
	```slu
	
	trait InStream
	{
		fn skipSpace(&mut self) trans self=>impl InStreamSkipSpace;
		fn dropSkipSpace(&mut self) trans self=>impl InStream;
		
		unsafe fn readNameUncheckedUntrans(&mut self) -> String;
		unsafe fn readNameUnchecked(&mut self) trans self=>impl InStream ->String {
		:::unsafe:
			return self.dropSkipSpace().readNameUncheckedUntrans();
		}
		fn readChar(&mut self) trans self=>impl InStream -> char;
		fn curIdx(&self) -> nsize;
	}
	trait InStreamSkipSpace
	{
		fn readName(&mut self) trans self=>impl InStream -> String {
		:::unsafe:
			return self.readNameUnchecked();
		}
	}


	--Vec in stream:

	struct VecInStreamState(InStreamState state)
	{
		idx=mut nsize,
		chars=mut Vec(char)
	};
	const VecInStream = VecInStreamState(InStreamState::Default)
	const VecInStreamSkipSpace = VecInStreamState(InStreamState::SkipSpace)

	impl with(InStreamState state) 
		for VecInStreamState(state)
	{
		fn curIdx(&self) -> nsize {
			return self.idx;
		}
		unsafe fn readNameUncheckedUntrans(&mut self) -> String {
		:::unsafe:
			return crate::internal::readNameUncheckedUntrans(self);
		}
		fn readChar(&mut self) trans
		{
			self.dropSkipSpace();
			self.idx+=1;
			return self.chars[self.idx-1];
		}
	}
	impl InStream for VecInStream
	{
		fn skipSpace(&mut self) trans
		{
			--implemented in another file
			crate::internal::skipSpace(self);
			trans self = VecInStreamSkipSpace{idx=self.idx,chars=self.chars};
		} 
		--Empty, as you havent skipped any space.
		fn dropSkipSpace(&self) {}
		
	}
	impl InStream for VecInStreamSkipSpace
	{
		--Empty, as you already skipped the space
		fn skipSpace(&self) {}
		fn dropSkipSpace(&mut self) trans {
			trans self = VecInStream{idx=self.idx,chars=self.chars};
		}
	}
	impl InStreamSkipSpace for VecInStreamSkipSpace {}
	```
}